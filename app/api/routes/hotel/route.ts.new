import { NextResponse } from "next/server";
import HotelService, { Currency, HotelStatus } from "../../services/hotelServices";
import consoleManager from "../../utils/consoleManager";

// Get all hotels (GET)
export async function GET(req: Request) {
    try {
        const hotels = await HotelService.getAllHotels();
        
        consoleManager.log("Fetched all hotels");

        return NextResponse.json({
            statusCode: 200,
            message: "Hotels fetched successfully",
            data: hotels,
            errorCode: "NO",
            errorMessage: "",
        }, { status: 200 });
    } catch (error: any) {
        consoleManager.error("Error in GET /api/hotel:", error);
        return NextResponse.json({
            statusCode: 500,
            errorCode: "INTERNAL_ERROR",
            errorMessage: error.message || "Internal Server Error",
        }, { status: 500 });
    }
}

// Create a new hotel (POST)
export async function POST(req: Request) {
    try {
        const data = await req.json();

        // Validate required fields
        if (!data.name || !data.category || !data.description || 
            !data.location?.address || !data.location?.city || !data.location?.country ||
            !data.priceRange?.startingPrice || !data.priceRange?.currency || 
            !data.contactInfo?.phone || !data.contactInfo?.email) {
            return NextResponse.json({
                statusCode: 400,
                errorCode: "VALIDATION_ERROR",
                errorMessage: "Required fields are missing",
            }, { status: 400 });
        }

        // Format data for service
        const hotelData = {
            name: data.name,
            category: data.category,
            description: data.description,
            location: {
                address: data.location.address,
                city: data.location.city,
                state: data.location.state || "",
                country: data.location.country,
                zipCode: data.location.zipCode || "",
            },
            priceRange: {
                startingPrice: Number(data.priceRange.startingPrice) || 0,
                currency: data.priceRange.currency || "USD" as Currency,
            },
            rating: Number(data.rating) || 0,
            status: data.status || "draft" as HotelStatus,
            amenities: Array.isArray(data.amenities) ? data.amenities : [],
            rooms: Array.isArray(data.rooms) ? data.rooms : [],
            images: Array.isArray(data.images) ? data.images : [],
            contactInfo: {
                phone: data.contactInfo.phone || "",
                email: data.contactInfo.email || "",
                website: data.contactInfo.website || "",
            },
            policies: {
                checkIn: data.policies?.checkIn || "14:00",
                checkOut: data.policies?.checkOut || "11:00",
                cancellation: data.policies?.cancellation || "24 hours before check-in",
            },
            firstName: data.firstName || "",
            lastName: data.lastName || "",
            companyName: data.companyName || "",
            venueType: data.venueType || "",
            position: data.position || "",
            websiteLink: data.websiteLink || "",
            offerWeddingPackages: data.offerWeddingPackages as 'Yes' | 'No' | undefined,
            resortCategory: data.resortCategory || "",
            weddingPackagePrice: data.weddingPackagePrice || "",
            servicesOffered: Array.isArray(data.servicesOffered) ? data.servicesOffered : [],
            maxGuestCapacity: data.maxGuestCapacity || "",
            numberOfRooms: data.numberOfRooms || "",
            venueAvailability: data.venueAvailability || "",
            allInclusivePackages: Array.isArray(data.allInclusivePackages) ? data.allInclusivePackages : [],
            staffAccommodation: Array.isArray(data.staffAccommodation) ? data.staffAccommodation : [],
            diningOptions: Array.isArray(data.diningOptions) ? data.diningOptions : [],
            otherAmenities: Array.isArray(data.otherAmenities) ? data.otherAmenities : [],
            bookingLeadTime: data.bookingLeadTime || "",
            preferredContactMethod: Array.isArray(data.preferredContactMethod) ? data.preferredContactMethod : [],
            weddingDepositRequired: data.weddingDepositRequired || "",
            refundPolicy: data.refundPolicy || "",
            referralSource: data.referralSource || "",
            partnershipInterest: data.partnershipInterest || "",
            uploadResortPhotos: Array.isArray(data.uploadResortPhotos) ? data.uploadResortPhotos : [],
            uploadMarriagePhotos: Array.isArray(data.uploadMarriagePhotos) ? data.uploadMarriagePhotos : [],
            uploadWeddingBrochure: Array.isArray(data.uploadWeddingBrochure) ? data.uploadWeddingBrochure : [],
            uploadCancelledCheque: Array.isArray(data.uploadCancelledCheque) ? data.uploadCancelledCheque : [],
            agreeToTerms: Boolean(data.agreeToTerms),
            agreeToPrivacy: Boolean(data.agreeToPrivacy),
            signature: data.signature || ""
        };

        const newHotel = await HotelService.createHotel(hotelData);

        consoleManager.log("Created new hotel:", newHotel.id);

        return NextResponse.json({
            statusCode: 201,
            message: "Hotel created successfully",
            data: newHotel,
            errorCode: "NO",
            errorMessage: "",
        }, { status: 201 });
    } catch (error: any) {
        consoleManager.error("Error in POST /api/hotel:", error);
        return NextResponse.json({
            statusCode: 500,
            errorCode: "INTERNAL_ERROR",
            errorMessage: error.message || "Internal Server Error",
        }, { status: 500 });
    }
}
