"use client"

import { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { AppDispatch } from '@/lib/redux/store';
import {
  fetchUserById,
  updateUser,
  selectUserById,
  selectUserLoading,
  selectUserError,
} from '@/lib/redux/features/userSlice';
import { selectAuth } from '@/lib/redux/features/authSlice';
import { toast } from "sonner";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import {
  Card,
  CardContent,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";

interface User {
  id: string;
  name: string;
  email: string;
  role: 'user' | 'admin' | 'hotel' | 'vendor';
  avatar?: string;
  phoneNumber?: string;
  address?: {
    street: string;
    city: string;
    state: string;
    country: string;
    zipCode: string;
  };
  bookings?: string[];
  favorites?: {
    hotels?: string[];
    vendors?: string[];
  };
  notifications: {
    id: string;
    message: string;
    read: boolean;
    createdAt: string;
  }[];
  createdAt: string;
  updatedAt: string;
}

interface UserFormState {
  name: string;
  email: string;
  role: 'user' | 'admin' | 'hotel' | 'vendor';
  phoneNumber: string;
  street: string;
  city: string;
  state: string;
  country: string;
  zipCode: string;
  avatar: string | null;
  avatarFile: File | null;
  removeAvatar: boolean;
}

const initialFormState: UserFormState = {
  name: "",
  email: "",
  role: "user",
  phoneNumber: "",
  street: "",
  city: "",
  state: "",
  country: "",
  zipCode: "",
  avatar: null,
  avatarFile: null,
  removeAvatar: false,
};

export default function UserDashboard() {
  const dispatch = useDispatch<AppDispatch>();
  const auth = useSelector(selectAuth);
  const user = useSelector((state) => auth?.id ? selectUserById(state, auth.id) : null);
  const isLoading = useSelector(selectUserLoading);
  const error = useSelector(selectUserError);

  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editUserForm, setEditUserForm] = useState<UserFormState | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    if (auth?.id) {
      dispatch(fetchUserById(auth.id));
    }
  }, [dispatch, auth?.id]);

  // Clean up object URLs when component unmounts or form changes
  useEffect(() => {
    return () => {
      if (editUserForm?.avatarFile && editUserForm.avatar?.startsWith('blob:')) {
        URL.revokeObjectURL(editUserForm.avatar);
      }
    };
  }, [editUserForm?.avatarFile]);

  const resetEditForm = () => {
    if (editUserForm?.avatarFile && editUserForm.avatar?.startsWith('blob:')) {
      URL.revokeObjectURL(editUserForm.avatar);
    }
    setEditUserForm(null);
  };

  const openEditDialog = () => {
    if (!user) return;
    
    setEditUserForm({
      name: user.name,
      email: user.email,
      role: user.role,
      phoneNumber: user.phoneNumber || "",
      street: user.address?.street || "",
      city: user.address?.city || "",
      state: user.address?.state || "",
      country: user.address?.country || "",
      zipCode: user.address?.zipCode || "",
      avatar: user.avatar || null,
      avatarFile: null,
      removeAvatar: false,
    });
    setIsEditDialogOpen(true);
  };

  const handleEdit = async () => {
    if (!editUserForm || !auth?.id || isSubmitting) return;

    // Validation
    if (!editUserForm.name.trim()) {
      toast.error("Name is required");
      return;
    }
    if (!editUserForm.email.trim()) {
      toast.error("Email is required");
      return;
    }

    setIsSubmitting(true);

    try {
      const formData = new FormData();
      formData.append("name", editUserForm.name);
      formData.append("email", editUserForm.email);
      formData.append("role", editUserForm.role);
      formData.append("phoneNumber", editUserForm.phoneNumber);

      // Add address fields if any are present
      if (editUserForm.street || editUserForm.city || editUserForm.state || editUserForm.country || editUserForm.zipCode) {
        formData.append("street", editUserForm.street);
        formData.append("city", editUserForm.city);
        formData.append("state", editUserForm.state);
        formData.append("country", editUserForm.country);
        formData.append("zipCode", editUserForm.zipCode);
      }

      if (editUserForm.avatarFile) {
        formData.append("avatar", editUserForm.avatarFile);
      }
      formData.append("removeAvatar", editUserForm.removeAvatar.toString());

      await dispatch(updateUser({ id: auth.id, data: formData })).unwrap();
      toast.success("Profile updated successfully");
      setIsEditDialogOpen(false);
      resetEditForm();
    } catch (err: any) {
      toast.error(err.message || "Error updating profile");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!editUserForm) return;

    const file = e.target.files?.[0];
    if (file) {
      // Clean up previous object URL
      if (editUserForm.avatarFile && editUserForm.avatar?.startsWith('blob:')) {
        URL.revokeObjectURL(editUserForm.avatar);
      }

      setEditUserForm({
        ...editUserForm,
        avatar: URL.createObjectURL(file),
        avatarFile: file,
        removeAvatar: false,
      });
    }
  };

  const handleRemoveAvatar = () => {
    if (!editUserForm) return;

    // Clean up previous object URL
    if (editUserForm.avatarFile && editUserForm.avatar?.startsWith('blob:')) {
      URL.revokeObjectURL(editUserForm.avatar);
    }

    setEditUserForm({
      ...editUserForm,
      avatar: null,
      avatarFile: null,
      removeAvatar: true,
    });
  };

  const renderUserForm = () => (
    <div className="grid gap-4">
      <div className="grid gap-2">
        <Label htmlFor="name">Name</Label>
        <Input
          id="name"
          value={editUserForm?.name || ""}
          onChange={(e) =>
            setEditUserForm((prev) =>
              prev ? { ...prev, name: e.target.value } : null
            )
          }
          placeholder="Your name"
        />
      </div>

      <div className="grid gap-2">
        <Label htmlFor="email">Email</Label>
        <Input
          id="email"
          value={editUserForm?.email || ""}
          onChange={(e) =>
            setEditUserForm((prev) =>
              prev ? { ...prev, email: e.target.value } : null
            )
          }
          placeholder="Email address"
        />
      </div>

      <div className="grid gap-2">
        <Label htmlFor="phoneNumber">Phone Number</Label>
        <Input
          id="phoneNumber"
          value={editUserForm?.phoneNumber || ""}
          onChange={(e) =>
            setEditUserForm((prev) =>
              prev ? { ...prev, phoneNumber: e.target.value } : null
            )
          }
          placeholder="Phone number"
        />
      </div>

      <div className="grid gap-2">
        <Label htmlFor="street">Street Address</Label>
        <Input
          id="street"
          value={editUserForm?.street || ""}
          onChange={(e) =>
            setEditUserForm((prev) =>
              prev ? { ...prev, street: e.target.value } : null
            )
          }
          placeholder="Street address"
        />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div className="grid gap-2">
          <Label htmlFor="city">City</Label>
          <Input
            id="city"
            value={editUserForm?.city || ""}
            onChange={(e) =>
              setEditUserForm((prev) =>
                prev ? { ...prev, city: e.target.value } : null
              )
            }
            placeholder="City"
          />
        </div>

        <div className="grid gap-2">
          <Label htmlFor="state">State</Label>
          <Input
            id="state"
            value={editUserForm?.state || ""}
            onChange={(e) =>
              setEditUserForm((prev) =>
                prev ? { ...prev, state: e.target.value } : null
              )
            }
            placeholder="State"
          />
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div className="grid gap-2">
          <Label htmlFor="country">Country</Label>
          <Input
            id="country"
            value={editUserForm?.country || ""}
            onChange={(e) =>
              setEditUserForm((prev) =>
                prev ? { ...prev, country: e.target.value } : null
              )
            }
            placeholder="Country"
          />
        </div>

        <div className="grid gap-2">
          <Label htmlFor="zipCode">ZIP Code</Label>
          <Input
            id="zipCode"
            value={editUserForm?.zipCode || ""}
            onChange={(e) =>
              setEditUserForm((prev) =>
                prev ? { ...prev, zipCode: e.target.value } : null
              )
            }
            placeholder="ZIP Code"
          />
        </div>
      </div>

      <div className="grid gap-2">
        <Label htmlFor="avatar">Avatar</Label>
        <Input
          id="avatar"
          type="file"
          accept="image/*"
          onChange={handleAvatarChange}
        />
        {editUserForm?.avatar && (
          <div className="mt-2">
            <img
              src={editUserForm.avatar}
              alt="Avatar preview"
              className="w-20 h-20 object-cover rounded-full"
            />
            <Button
              variant="destructive"
              size="sm"
              onClick={handleRemoveAvatar}
              className="mt-2"
            >
              Remove Avatar
            </Button>
          </div>
        )}
      </div>
    </div>
  );

  if (!auth) {
    return <div className="container mx-auto p-6">Please log in to view your profile.</div>;
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">My Profile</h1>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <div className="max-w-2xl mx-auto">
        {isLoading ? (
          <p>Loading...</p>
        ) : user ? (
          <Card>
            <CardHeader>
              <div className="flex items-center gap-4">
                {user.avatar && (
                  <img
                    src={user.avatar}
                    alt={`${user.name}'s avatar`}
                    className="w-16 h-16 rounded-full object-cover"
                  />
                )}
                <div>
                  <CardTitle>{user.name}</CardTitle>
                  <CardDescription>{user.email}</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="font-semibold">Role</p>
                    <p className="capitalize">{user.role}</p>
                  </div>
                  {user.phoneNumber && (
                    <div>
                      <p className="font-semibold">Phone</p>
                      <p>{user.phoneNumber}</p>
                    </div>
                  )}
                </div>

                {user.address && (
                  <div>
                    <p className="font-semibold">Address</p>
                    <p>{user.address.street}</p>
                    <p>{user.address.city}, {user.address.state} {user.address.zipCode}</p>
                    <p>{user.address.country}</p>
                  </div>
                )}

                <div>
                  <p className="font-semibold">Notifications</p>
                  <p>{user.notifications.filter(n => !n.read).length} unread notifications</p>
                </div>

                {user.bookings && (
                  <div>
                    <p className="font-semibold">Bookings</p>
                    <p>{user.bookings.length} total bookings</p>
                  </div>
                )}

                {user.favorites && (
                  <div>
                    <p className="font-semibold">Favorites</p>
                    <p>
                      {user.favorites.hotels?.length || 0} hotels saved &bull;{" "}
                      {user.favorites.vendors?.length || 0} vendors saved
                    </p>
                  </div>
                )}
              </div>
            </CardContent>
            <CardFooter className="flex justify-end">
              <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
                <DialogTrigger asChild>
                  <Button variant="outline" onClick={() => openEditDialog()}>
                    Edit Profile
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Edit Profile</DialogTitle>
                    <DialogDescription>
                      Make changes to your profile here.
                    </DialogDescription>
                  </DialogHeader>
                  {renderUserForm()}
                  <DialogFooter>
                    <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
                      Cancel
                    </Button>
                    <Button onClick={handleEdit} disabled={isSubmitting}>
                      {isSubmitting ? "Saving..." : "Save Changes"}
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </CardFooter>
          </Card>
        ) : (
          <p>No user data found.</p>
        )}
      </div>
    </div>
  );
}
